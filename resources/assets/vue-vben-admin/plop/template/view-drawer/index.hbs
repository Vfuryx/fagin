<template>
  <div>
    <BasicTable @register="registerTable">
      <template #toolbar>
        <a-button
          type="primary"
          @click="handleCreate"
          v-if="hasPermission(PermCodeEnum.Admin{{ pascalCase path }}{{ pascalCase name }}Create)"
        >
          新增
        </a-button>
      </template>
      <template #action="{ record }">
        <TableAction
          :actions="[
            {
              icon: 'ant-design:eye-outlined',
              auth: PermCodeEnum.Admin{{ pascalCase path }}{{ pascalCase name }}Query,
              onClick: handleView.bind(null, record),
            },
            {
              icon: 'clarity:note-edit-line',
              auth: PermCodeEnum.Admin{{ pascalCase path }}{{ pascalCase name }}Update,
              onClick: handleEdit.bind(null, record),
            },
            {
              icon: 'ant-design:delete-outlined',
              auth: PermCodeEnum.Admin{{ pascalCase path }}{{ pascalCase name }}Delete,
              color: 'error',
              popConfirm: {
                title: '是否确认删除',
                confirm: handleDelete.bind(null, record),
              },
            },
          ]"
        />
      </template>
    </BasicTable>
    <{{ pascalCase name }}Drawer @register="registerDrawer" @success="handleSuccess" />
    <DetailDrawer @register="registerDetailDrawer" />
  </div>
</template>
<script lang="ts" setup name="{{ pascalCase name }}Management">
  import { BasicTable, useTable, TableAction } from '/@/components/Table';
  import { useDrawer } from '/@/components/Drawer';
  import { get{{ pascalCase name }}List } from '/@/api/{{ camelCase path }}/{{ camelCase name }}';
  import { PermCodeEnum } from '/@/enums/permCodeEnum';

  import { usePermission } from '/@/hooks/web/usePermission';
  import {{ pascalCase name }}Drawer from './{{ pascalCase name }}Drawer.vue';
  import DetailDrawer from './detailDrawer.vue';
  import { columns, searchFormSchema } from './{{ camelCase name }}.data';

  const { hasPermission } = usePermission();
  const [registerDrawer, { openDrawer }] = useDrawer();
  const [registerDetailDrawer, { openDrawer: openDetailDrawer }] = useDrawer();

  const [registerTable, { reload }] = useTable({
    title: '列表',
    api: get{{ pascalCase name }}List,
    columns,
    formConfig: {
      labelWidth: 120,
      schemas: searchFormSchema,
      autoSubmitOnEnter: true,
    },
    striped: false,
    useSearchForm: hasPermission(PermCodeEnum.Admin{{ pascalCase path }}{{ pascalCase name }}Query),
    showTableSetting: true,
    bordered: true,
    showIndexColumn: false,
    canResize: true,
    actionColumn: {
      width: 120,
      title: '操作',
      dataIndex: 'action',
      slots: { customRender: 'action' },
      fixed: undefined,
    },
  });

  function handleView(record: Recordable) {
    openDetailDrawer(true, {
      record,
    });
  }

  function handleCreate() {
    openDrawer(true, {
      isUpdate: false,
    });
  }

  function handleEdit(record: Recordable) {
    openDrawer(true, {
      record,
      isUpdate: true,
    });
  }

  function handleDelete(record: Recordable) {
    console.log(record);
    reload();
  }

  function handleSuccess() {
    reload();
  }
</script>
